#编程实践

书写可维护的JavaScript并不仅仅是关于如何格式化代码，它还关系到代码做什么问题。

## 尊重对象所有权

你不能修改不属于你的对象。JavaScript的动态性质使得几乎任何东西在任何时间都可以修改。如果你不负责维护某个对象，它的对象或者它的方法，那么你就不能对它们进行修改。更具体所：

- 不要为实例或原型添加属性
- 不要为实例或原型添加方法
- 不要重定义已存在的方法

依然可以通过以下方式为对象创建新的功能：

- 创建包含所需功能的新对象，并用它与相关对象进行交互。
- 创建自定义类型，继承需要进行修改的类型。然后可以为自定义类型添加额外功能。

## 避免全局量

尽可能避免全局变量和函数，这也关系到创建一个脚本执行的一致的和可维护的环境。最多创建一个全局变量，让其他对象和函数存在其中。请看以下例子：

```
//两个全局变量——避免
var name = "Nicholas";
function sayName() {
    alert(name);
}
```
这段代码包含了两个全局量：变量name和函数sayName()。其实可以创建一个包含两者的对象。

```
//一个全局量——推荐
var MyApplocation = {
    name: "Nicholas",
    sayName: function() {
        alert(this.name);
    }
};
```
这段重写的代码引入了一个单一的全局变量MyApplication，name和sayName()都附加到其上。

这样做消除了一些存在于前一段代码中的一些问题。

首先，变量name覆盖window.name属性，可能会与其他功能产生冲突；

其次，它有助于消除功能作用域的混淆。调用MyApplocation.sayName()在逻辑上暗示代码的任何问题都可以通过检查定义的MyApplocation()代码来确定。

单一的全局量的延伸便是命名空间的概念。命名空间包括创建一个用于放置功能的对象。

YUI库有若干追加功能的命名空间。比如：
- YAHOO.util.Dom——处理DOM的方法
- YAHOO.util.Event——与事件交互的方法
- YAHOO.lang——用于底层语言特性的方法

对于YUI，单一的全局对象YAHOO作为一个容器，其中定义了其他对象，用这种方式将功能组合在一起的对象，叫做命名空间。


